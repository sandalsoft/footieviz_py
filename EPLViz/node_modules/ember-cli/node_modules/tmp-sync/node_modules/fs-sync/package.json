{
  "name": "fs-sync",
  "version": "0.2.4",
  "description": "synchronous fs with more fun",
  "main": "dist/index",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "kael"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:kaelzhang/node-fs-sync.git"
  },
  "bugs": {
    "url": "https://github.com/kaelzhang/node-fs-sync/issues"
  },
  "keywords": [
    "fs",
    "fs-sync",
    "sync",
    "synchronous fs",
    "copy",
    "mkdir",
    "mkdirp",
    "write",
    "read",
    "readJSON",
    "isDir",
    "isFile",
    "isLink",
    "exists",
    "grunt file",
    "delete",
    "expand",
    "contain"
  ],
  "dependencies": {
    "mkdirp": "~0.3.5",
    "iconv-lite": "~0.2.10",
    "lodash": "~1.2.1",
    "glob": "~3.2.1",
    "rimraf": "~2.1.4"
  },
  "devDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# fs-sync\n\n> Synchronous fs with more fun\n\n## Getting Started\nThis module is created for the favor of use of `fs.xxxSync`.\n\nOnce `fs-sync` is installed, you can use:\n\n```js\nvar fs = require('fs-sync');\n\nif(fs.exists('package.json')){\n\tvar pkg = fs.readJSON('package.json');\n}\n```\t\n\t\n## Methods\n\n```js\nvar fs = require('fs-sync');\n```\n\t\n### fs.defaultEncoding\nType: `String`\n\nDefault value: `'utf-8'`\n\nGlobal default encoding\n\n```js\nfs.defaultEncoding = 'utf-8'\n```\n\n### fs.copy(from, to, options)\n\nCopy a file or a whole directory to the destination. During this, necessary directories will be created.\n\n#### Syntax\n\n```js\nfs.copy(file, destpath, options);\nfs.copy(dir, destpath, options);\n```\n\t\n#### file\nType: `String`\n\nPath of file to be copied\n\n#### dir\nType: `String`\n\nPath of directory to be copied\n\n#### options.force\nType: `Boolean`\n\nDefault value: `false`\n\nBy default, `fs.copy` will not override existed files, set `options.force` as `true` to override.\n\n\n### fs.mkdir(path)\n\nCommandline `mkdir` or `mkdir -p`\n\n\n### fs.expand(patterns, options)\n\nLike `grunt.file.expand`, but the sequence of the arguments is different\n\t\n\n### fs.write(file, content, options)\n\n#### options\nType: `Object`\n\nThe same as the `options` argument of [fs.writeFile](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback)\n\n### fs.read(file, options)\nRead a file\n\n#### options\nType: `Object`\n\nThe same as the `options` argument of [fs.writeFile](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback), except:\n\n#### options.encoding\nType: `String`\n\nDefault value: `fs.defaultEncoding`\n\n### fs.readJSON(file, options)\nRead a file as the JSON format, if the file content fails to be parsed as JSON, an error will be thrown.\n\n### fs.remove()\n\nDelete a file or a whole directory. It's a dangerous action, be careful.\n\nEquivalent to `rm -rf`(remove a folder and all its contents) or `rm -f`(unlink a file)\n\n#### Syntax\n\n```js\t\nfs.remove(file)\nfs.remove(dir)\n```\n\n### fs.exists(...)\n\n`arguments` will be called with `path.join`\n\n### fs.isDir(path)\n\n### fs.isFile(path)\n\n### fs.isLink(path)\n\n### fs.isPathAbsolute(path)\n\n#### Returns `Boolean`\n\nWhether the given `path` is an absolute path (starting with `'/'`)\n\n### fs.doesPathContain(ancestor, path...)\n\n```js\nif(fs.doesPathContain(ancestor, path, path2)){\n\tconsole.log(path, 'and', path2, 'are inside', ancestor);\n}\n```\n\n#### Returns `Boolean`\n\nWhether path `ancestor` contains all `path`s after\n\n#### ancestor `String`\n\nAncestor path\n\n#### path `String`\n\nThe arguments of `fs.doesPathContain` could be more than 2.\n\n\n\n\n\t\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kaelzhang/node-fs-sync",
  "_id": "fs-sync@0.2.4",
  "_from": "fs-sync@^0.2.4"
}
